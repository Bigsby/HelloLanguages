{
  "setup": {
    "name": "Setup & Run",
    "show": true,
    "type": "steps",
    "description": "What needs to be installed to get started on each language.",
    "text": "<p>Since the computer and the, already very high-level, Operating System that is running don't know much more than machine code, the code, of each language, needs to be compiled and/or have a runtime to run it.</p><p>Here are the steps required to run a program.</p>"
  },
  "hello": {
    "name": "Hello World!",
    "show": true,
    "description": "Of course, the first project is a 'Hello, World'.",
    "text": "<p>Every tutorial of every language starts with an app that simply outputs \"Hello, World\". It serves the purposes of making sure everything (compile, runtime, etc.) is in place and, also, displaying the most simple structure of a program.</p>",
    "type": "code",
    "output": "Hello, World!",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl", "ps1" ],
    "notes": {
      "cpp": [
        "<code>cout</code> is the console output stream",
        "<code>&lt;&lt;</code> is the operator that \"means\" write to stream."
      ]
    }
  },
  "comments": {
    "name": "Commenting",
    "show": true,
    "description": "Non-processed statements.",
    "text": "<p>The first thing to do after writing some code is writing non-code, i.e., comments. Most of the times to comment some code that is no longer needed.</p>",
    "type": "code",
    "output": "Hello, Comments!",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl", "ps1" ]
  },
  "structure": {
    "name": "Structure",
    "show": false,
    "description": "Spaces, simbols, seperators, termintators.",
    "text": "",
    "languages": []
  },
  "dataTypes": {
    "name": "Data Types",
    "description": "The types of data know to the language.",
    "text": "<p>Each language, even dynanmic ones, have defined types of data for simple (low-level) values. Since the computer only knows numbers, and only two of them (0 and 1), every language defines a set of data types that represent the most used value types that wrap these types writing (alocation) and reading (accessing/combining). The most common types that allow (almost) every computational needs, would be <b>booleans</b>, <b>numeric</b> (integer and not) and representations of <b>text characters</b> (alone or in sequences).</p>",
    "type": "code",
    "languages": [],
    "extraCode": {
      "js": {
        "simple": {
          "text": "The base types known to <b>JavaScript</b> are:"
        },
        "complex": {
          "text": "Other types serve the object-oriented side of <b>JavaScript</b>."
        }
      },
      "cpp": {
        "simple": "The base types in <b>C++</b> are:"
      }
    }
  },
  "variables": {
    "name": "Variables",
    "show": true,
    "description": "Holding in-memory values to be (re)used.",
    "text": "<p>One could always access the computer memory alocations by its number/position but it's way more practical to name them and use the name for future reference.</p>",
    "type": "code",
    "output": "This is the sentence.\nThis is the sentence.\nThis is another sentence.",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl", "ps1" ],
    "extraCode": {
      "js": {
        "dynamic": {
          "text": "Since <b>JavaScript</b> is a dynamic language <code>var x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "pl": {
        "dynamic": {
          "text": "Since <b>Perl</b> is a dynamic language <code>$x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "py": {
        "dynamic": {
          "text": "Since <b>Python</b> is a dynamic language <code>x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "rb": {
        "dynamic": {
          "text": "Since <b>Ruby</b> is a dynamic language <code>$x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "ps1": {
        "dynamic": {
          "text": "Since <b>PowerShell</b> is a dynamic language <code>$x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      }
    },
    "notes": {
      "fs": [
        "<code>mutable</code> keyword is required for variables to have the ability to change its value.",
        "Assigning on variable declaration uses <code>=</code> but reseting uses <code>&lt;-</code>."
      ]
    }
  },
  "strings": {
    "name": "Text | Strings",
    "show": true,
    "description": "Working with sequences of characters. Concatenating, interpolation, etc.",
    "text": "",
    "type": "code",
    "output": "Joining strings.\nThe value 3 in interpolated",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl", "ps1" ],
    "notes": {
      "cpp": [
        "There is no actual string concatenation and intrapolation in <b>C++</b>. In fact, the \"simplest\" way to achieve that functionality is using the <code>std::string</code> class that encapsulates all the handling of the underlying <code>char*</code>."
      ]
    },
    "extraCode": {
      "py": {
        "interpolation": {
          "text": "The code above is only available in <b>Pythong 3.6</b>. These other options are still valid, each one, returning the same last line as before."
        }
      },
      "fs": {
        "types": {
          "text": "There are more types known to <code>printfn</code>. Here are some examples, although there is way more to it...",
          "output": "The string string in interpolated\nThe boolean true in interpolated\nThe integer 123 in interpolated\nThe float 12.300000 in interpolated\nThe list [|\"Joining \"; \"strings.\"|] in interpolated\nThe object 12.3 in interpolated"
        }
      }
    }
  },
  "dry": {
    "name": "Methods/Functions (Don't Repeat Yourself)",
    "show": true,
    "description": "Wrapping functionality in a code block that can be reused.",
    "text": "Reusing code is one the finest arts in software development. For that, languages provide their ways to define, implement and call (invoke) these wrappers of sequences of instructions.",
    "type": "code",
    "output": "Doing stuff!\n2 + 1 = 3",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl" ]
  },
  "comparison_operators": {
    "name": "Comparison Operators",
    "show": true,
    "description": "Comparing stuff.",
    "text": "<p>The ability to compare values is essential to, life and, every computer program. It allows the program to follow different paths if so state is verified.</p>",
    "type": "code",
    "output": "1 equals 2 is false\n1 not equals 2 is true\n1 larger than 2 is false\n1 larger than or equals 2 is false\n1 less than 2 is true\n1 less than or equals 2 is true",
    "alternativeOutputs": [
      {
        "text": "Some output booleans as 1 (one) for true and 0 (zero) for false.",
        "output": "1 equals 2 is 0\n1 not equals 2 is 1\n1 larger than 2 is 0\n1 larger than or equals 2 is 0\n1 less than 2 is 1\n1 less than or equals 2 is 1"
      },
      {
        "text": "Some output booleans with a first capital letter, i.e., True and False.",
        "output": "1 equals 2 is False\n1 not equals 2 is True\n1 larger than 2 is False\n1 larger than or equals 2 is False\n1 less than 2 is True\n1 less than or equals 2 is True"
      }
    ],
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl" ],
    "notes": {
      "pl": [
        "Since <b>Perl</b> Perl does not have a constant string for boolean values, <code>result</code> needs to hold the string value."
      ]
    },
    "todo": [
      "reference equals",
      "type comparison on dynamic languages"
    ]
  },
  "logical_operators": {
    "name": "Logical Operators",
    "show": true,
    "description": "And, Or, Not ...",
    "text": "",
    "type": "code",
    "languages": []
  },
  "if": {
    "name": "If/Else",
    "show": true,
    "description": "Evey language has, at least, one conditional statement.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "loop": {
    "name": "Looping",
    "show": true,
    "description": "Repeating until...or not.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "iterate": {
    "name": "Iterating a sequence",
    "show": true,
    "description": "Repeat for every item in a sequence.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "scope": {
    "name": "Access scope",
    "show": true,
    "description": "Where and when are things accessible.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "stream": {
    "name": "Streaming",
    "show": true,
    "description": "Processing sequences of bytes.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "file_read": {
    "name": "Read from File",
    "show": true,
    "description": "Reading from the File System",
    "text": "",
    "type": "code",
    "languages": []
  },
  "file_write": {
    "name": "Write to File",
    "show": true,
    "description": "Writing to the File System",
    "text": "",
    "type": "code",
    "languages": []
  },
  "web_call": {
    "name": "Web Call",
    "show": true,
    "description": "Making an HTTP request",
    "text": "",
    "type": "code",
    "languages": []
  },
  "gui": {
    "name": "GUI",
    "show": true,
    "description": "Creating a Graphical User Interface",
    "text": "",
    "type": "code",
    "languages": []
  }
}