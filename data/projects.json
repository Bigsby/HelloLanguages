{
  "setup": {
    "name": "Setup & Run",
    "type": "steps",
    "description": "What needs to be installed to get started on each language.",
    "text": "<p>Since the computer and the, already very high-level, Operating System that is running don't know much more than machine code, the code, of each language, needs to be compiled and/or have a runtime to run it.</p><p>Here are the steps required to run a program on each of the languages.</p>"
  },
  "hello": {
    "name": "Hello World!",
    "description": "Of course, the first project is a 'Hello, World'.",
    "text": "<p>Every tutorial of every language starts with an app that simply outputs \"Hello, World\". It serves the purposes of making sure everything (compile, runtime, etc.) is in place and, also, displaying the most simple structure of a program of a given language.</p>",
    "type": "code",
    "output": "Hello, World!",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl" ],
    "notes": {
      "cpp": [
        "<code>cout</code> is the console output stream",
        "<code>&lt;&lt;</code> is the operator that \"means\" write to stream."
      ]
    }
  },
  "comments": {
    "name": "Commenting",
    "description": "Non-processed statements.",
    "text": "<p>The first thing to do after writing some code is writing non-code, i.e., comments. Most of the times to comment some code that is no longer needed.</p>",
    "type": "code",
    "output": "Hello, Comments!",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl" ]
  },
  "dataTypes": {
    "name": "Data Types",
    "description": "The types of data know to the language."
  },
  "variables": {
    "name": "Variables",
    "description": "Holding in-memory values to be (re)used.",
    "text": "<p>One could always access the computer memory alocations by its number/position but it's way more practical to name them and use the name for future reference.</p>",
    "type": "code",
    "output": "This is the sentence.\nThis is the sentence.\nThis is another sentence.",
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl" ],
    "extraCode": {
      "js": {
        "dynamic": {
          "text": "Since <b>JavaScript</b> is a dynamic language <code>var x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "pl": {
        "dynamic": {
          "text": "Since <b>Perl</b> is a dynamic language <code>$x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "py": {
        "dynamic": {
          "text": "Since <b>Python</b> is a dynamic language <code>x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      },
      "rb": {
        "dynamic": {
          "text": "Since <b>Ruby</b> is a dynamic language <code>$x = ...</code> doesn't enforce a type on the variable and, as such, the variable can change type. Because of that, this code is totally valid and has the exact same output."
        }
      }
    },
    "notes": {
      "fs": [
        "<code>mutable</code> keyword is required for variables to have the ability to change its value.",
        "Assigning on variable declaration uses <code>=</code> but reseting uses <code>&lt;-</code>."
      ]
    }
  },
  "strings": {
    "name": "Text | Strings",
    "description": "Working with sequences of characters. Concatenating, fornating, etc.",
    "text": "",
    "type": "code",
    "output": "",
    "languages": []
  },
  "comparison_operators": {
    "name": "Comparison Operators",
    "description": "Comparing stuff.",
    "text": "<p>The ability to compare values is essential to, life and, every computer program. It allows the program to follow different paths if so state is verified.</p>",
    "type": "code",
    "output": "1 equals 2 is false\n1 not equals 2 is true\n1 larger than 2 is false\n1 larger than or equals 2 is false\n1 less than 2 is true\n1 less than or equals 2 is true",
    "alternativeOutputs": [
      {
        "text": "Some output booleans as 1 (one) for true and 0 (zero) for false.",
        "output": "1 equals 2 is 0\n1 not equals 2 is 1\n1 larger than 2 is 0\n1 larger than or equals 2 is 0\n1 less than 2 is 1\n1 less than or equals 2 is 1"
      },
      {
        "text": "Some output booleans with a first capital letter, i.e., True and False.",
        "output": "1 equals 2 is False\n1 not equals 2 is True\n1 larger than 2 is False\n1 larger than or equals 2 is False\n1 less than 2 is True\n1 less than or equals 2 is True"
      }
    ],
    "languages": [ "js", "cpp", "py", "fs", "go", "rb", "cs", "java", "pl" ],
    "notes": {
      "pl": [
        "Since <b>Perlb/b> Perl does not have a constant string for boolean values, <code>result</code> needs to hold the string value."
      ]
    },
    "todo": [
      "reference equals",
      "type comparison on dynamic languages"
    ]
  },
  "logical_operators": {
    "name": "Logical Operators",
    "description": "And, Or, Not ...",
    "text": "",
    "type": "code",
    "languages": []
  },
  "if": {
    "name": "If/Else",
    "description": "Evey language has, at least, one conditional statement.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "loop": {
    "name": "Looping",
    "description": "Repeating until...or not.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "iterate": {
    "name": "Iterating a sequence",
    "description": "Repeat for every item in a sequence.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "dry": {
    "name": "Don't Repeat Yourself",
    "description": "Wrapping functionality in a code block that can be reused.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "scope": {
    "name": "Access scope",
    "description": "Where and when are things accessible.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "stream": {
    "name": "Streaming",
    "description": "Processing sequences of bytes.",
    "text": "",
    "type": "code",
    "languages": []
  },
  "file_read": {
    "name": "Read from File",
    "description": "Reading from the File System",
    "text": "",
    "type": "code",
    "languages": []
  },
  "file_write": {
    "name": "Write to File",
    "description": "Writing to the File System",
    "text": "",
    "type": "code",
    "languages": []
  },
  "web_call": {
    "name": "Web Call",
    "description": "Making an HTTP request",
    "text": "",
    "type": "code",
    "languages": []
  },
  "gui": {
    "name": "GUI",
    "description": "Creating a Graphical User Interface",
    "text": "",
    "type": "code",
    "languages": []
  }
}